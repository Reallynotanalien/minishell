09-15
- Created a new git repository
- Added the README template
- Created the folders for organisation
- Created the note files
- Added the base Makefile (to be modified by Élodie)
- Added the base minishell.h file (to be modified and even separated between multiple .h for exec, parsing and builtins)

Notes:
- Rule: do not put any headers in the .c files to avoid conflict
- Rule: add the date before each commit?
- At the end of the project, DO NOT PUSH the tools&notes section

To-do to add:
- Create a team in the intra
- Tokenisation 
- Separate the .h between multiple ones for each part of the project
- Signals function

Questions:
- Whose Libft do we take?

09-18
- Meeting to discuss the next steps, to do today:
	- Add notes to the files
	- Study readline and take notes to discuss tomorrow
	- Correct Élodie's pipex
- Approved Élodie's pull requests
- Added the notes of the day

09-19
- Separated the .h between multiple files

Notes: 
Video: 228 Writing Custom Shell or CLI via Readline Library in C or PHP
- We could use scanf to get input from the terminal, but we would not be able to get the history. The readline library does that for us.
- Install if not installed:
	sudo apt-get install libreadline6 libreadline6-dev 
	(might differ since it could have been updated)
- include readline/readline.h && readline/history.h

09-20
- Meeting to discuss how we could do the main structure of the project + tokenisation

Notes:
- Add clear history si on veux clear (commande clear)

To-do to add:
- Deal with the history (avec les touches haut et bas, redisplay et replace) ---- juste remplacer quand on fait tab?
- Gérer les absolute path (EXEC/GATHER INFORMATION)
- Gérer les charactères délimiteurs
- Gérer les // $$ 
- Dans la tokenisation, gérer les ````
- Ajouter le sujet dans les fichiers
- Gérer les executables et ce qui vient après

Questions:
- Find out how to hide readline leaks?
- How to organize structure

Tomorrow:
- Prioriser la to-do

09-21
- Meeting of the day to prioritize to-do list 
- Solved the compilation problem to make sure the prompt is working (added stdio.h before the lib in the .h file)
- Added the print_progress function and put it in strategic places in the code to help find potential errors. This will be deleted at the end of the project.
	The flag can be turned on or off manually by changing the code, so I want to find a way to make it so that it can be changed outside of the code (while compiling probably).
	Also I find that it bloats the code a bit, it will be deleted at the end but still. If I find a way to make it cleaner I will xD.
- Tested the main loop to make sure the prompt is working and the history too.

Notes:
- Shower thoughts:
	Separate the project into chunks that we can go through together one by one by separating them into tasks, those chunks can be the weekly focus
	Week 1 (this week) - Main loop (readline)
	Week 2 - Signals 
	Week 3 - Tokenisation (learn about how tokenisation work and how it's used, decide on how to do the struct)
	Week 4 - Main parsing (here_doc, errors, environment correct, etc.)
	Week 5 - Execution (absolute path && builtins)
	Week 6 - Builtins 
	Week 7 - Tests tests tests!!
- Something I can do today: create the printf flag and a printf function (if flag is on then print) with defined sentences and put them in different places in the code so we already have a base to test.
---- The printf flag should be added to the main static struct so we can access it everywhere. -----

09-22
- Research on signals (see notes in notebook)

09-25
- Meeting of the day to decide focus of the week
- Research on which signals are to be dealed with in minishell

09-26
- Meeting of the day to discuss progress 
- Updated the to-do file
- Added the signals function and researched on how to handle Ctrl+D

Notes:
-Ctrl-D is just an arbitrary way of telling the OS to send the eof signal to a process that is reading from the keyboard.
-Ctrl+D is not a signal, it's EOF (End-Of-File). It closes the stdin pipe. If read(STDIN) returns 0, it means stdin closed, which means Ctrl+D was hit (assuming there is a keyboard at the other end of the pipe).
- Ctrl+D in a hanged bash command (cat): ends the process and creates a newline
- Ctrl+D in a clean bash: closes the session.

Sujet: 
Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
• In interactive mode:
	◦ ctrl-C displays a new prompt on a new line.
	◦ ctrl-D exits the shell.
	◦ ctrl-\ does nothing.

In C, you can use the signal function to handle signals, including the SIGINT signal that is generated when you press 
Ctrl-C and the SIGTSTP signal generated by Ctrl-Z. However, Ctrl-D (EOF) is not typically handled using signals. 
Instead, it is often handled by checking for EOF in your input stream.

09-28
- Meeting of the day to discuss progress + new tasks of the day
- Solved the git problem.
- Added the libft properly.
- Adjusted the signals function so it is clean.
- Created error.c file and added it to the Makefile.
- Created the error and exit functions (to be changed, those are just drafts)
- Handles Ctrl+D now as an EOF

To-do
- Fonction message d'erreur
	- print message
	- errno
	- free
	- flag

Notes:
- In bash, Ctrl+C just writes on a newline so it erases the C symbol
- Also, Ctrl+D exits the program but it writes exit before getting out

About signals:
Yes, you've got the concept right. Signals are predefined events in your operating system that can interrupt 
the normal execution of your program. When a signal occurs, it can indeed stop the normal execution of your program. 
What the signal() function allows you to do is specify how your program should respond when a particular signal is received.

About Ctrl+d
When readline returns NULL, it means Ctrl+D was pressed (EOF), and you can exit the loop. 

09-29
- Meeting of the day to discuss progress + tasks to take on for the weekend.
- Solved the .h problem
- Created the static struct function. 

To-do
- errno
- tester les signaux et noter les tests + résultats

10-03
- Tested all of the signals
- Solved the ^C problem with the setattributes functions
- Deleted the printer files that were still there

10-04
- Mini meeting to discuss avancement
- To-do:
	- Put the line in the struct
	- Main parsing